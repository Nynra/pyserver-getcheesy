# Generated by Django 4.2.17 on 2025-03-07 12:15

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ReceiverConfiguration',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='receiver', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Fact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True)),
                ('activation_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='activation date')),
                ('pub_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('repeat', models.BooleanField(default=True)),
                ('repeat_interval', models.DurationField(default=datetime.timedelta(days=1))),
                ('on_specific_date', models.BooleanField(default=False)),
                ('specific_date', models.DateField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='specific date')),
                ('last_used', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last used')),
                ('fact', models.CharField(max_length=200)),
                ('user_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fact_user_config', to='pyserver_getcheesy.receiverconfiguration')),
            ],
            options={
                'permissions': [('can_read_random_fact', 'Can read a random fact')],
            },
        ),
        migrations.CreateModel(
            name='Compliment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True)),
                ('activation_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='activation date')),
                ('pub_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('repeat', models.BooleanField(default=True)),
                ('repeat_interval', models.DurationField(default=datetime.timedelta(days=1))),
                ('on_specific_date', models.BooleanField(default=False)),
                ('specific_date', models.DateField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='specific date')),
                ('last_used', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last used')),
                ('compliment', models.CharField(max_length=200)),
                ('user_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compliment_user_config', to='pyserver_getcheesy.receiverconfiguration')),
            ],
            options={
                'permissions': [('can_read_random_compliment', 'Can read a random compliment')],
            },
        ),
        migrations.CreateModel(
            name='CheesyQuote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True)),
                ('activation_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='activation date')),
                ('pub_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('repeat', models.BooleanField(default=True)),
                ('repeat_interval', models.DurationField(default=datetime.timedelta(days=1))),
                ('on_specific_date', models.BooleanField(default=False)),
                ('specific_date', models.DateField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='specific date')),
                ('last_used', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last used')),
                ('quote', models.CharField(max_length=200)),
                ('user_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quote_user_config', to='pyserver_getcheesy.receiverconfiguration')),
            ],
            options={
                'permissions': [('can_read_random_quote', 'Can read a random quote')],
            },
        ),
        migrations.CreateModel(
            name='CheesyJoke',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True)),
                ('activation_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='activation date')),
                ('pub_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('repeat', models.BooleanField(default=True)),
                ('repeat_interval', models.DurationField(default=datetime.timedelta(days=1))),
                ('on_specific_date', models.BooleanField(default=False)),
                ('specific_date', models.DateField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='specific date')),
                ('last_used', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last used')),
                ('joke', models.CharField(max_length=200)),
                ('user_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='joke_user_config', to='pyserver_getcheesy.receiverconfiguration')),
            ],
            options={
                'permissions': [('can_read_random_joke', 'Can read a random joke')],
            },
        ),
    ]
